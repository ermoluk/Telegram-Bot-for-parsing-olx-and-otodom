import json
import os
from telebot import TeleBot, types
from main_parsing import main
import re
from setup import token

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(token)

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ü–æ–ª—å—à–∏
cities = ['Warszawa', 'Krakow', 'Wroclaw', 'Poznan', 'Gdansk', 'Lodz', 'Katowice', 'Bialystok', 'Czestochowa']

# –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
rooms = ['1', '2', '3']

# –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
params = {}

pars_data = {}

name_a = []

# –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_lang = 'EN'

# –Ø–∑—ã–∫, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
lang = {}

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã JSON –¥–∞–Ω–Ω—ã—Ö
folder_path = 'JSON_DATA'

# –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
languages = ['EN','RU','UA','PL']

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {
    'EN': {
        'language_processing_': 'Search for housing üîé',
        'greeting': 'Hello! I am a bot that helps you find real estate in Poland.',
        'choose_city': 'üèôÔ∏è Choose a city in Poland:',
        'choose_rooms': 'üèò Choose the number of rooms:',
        'enter_min_price': '‚úèÔ∏è Enter the minimum price in PLN (e.g., 1000):',
        'enter_max_price': '‚úèÔ∏è Enter the maximum price in PLN (e.g., 2000):',
        'search_results': 'Found options using your search criteria:',
        'reset_search': 'Settings have been reset. Select "Search for housing üîé" to start a new search.',
        'search_settings': 'Search settings üîé',
        'settings': 'Settings ‚öôÔ∏è',
        'language_change': 'Language change üåê',
        'start_new_search': 'Start a new search üîé',
        'retrieval': 'Repeat search üîÅ',
        'select_setting': 'Select a setting',
        'automatic_check': 'Automatic check',
        'reboot': 'The bot has been preloaded, for it to work properly, run the command ( /start )'
    },
    'RU': {
        'language_processing_': '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ üîé',
        'greeting': '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ü–æ–ª—å—à–µ.',
        'choose_city': 'üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –ü–æ–ª—å—à–µ:',
        'choose_rooms': 'üèò –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:',
        'enter_min_price': '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∑–ª–æ—Ç—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):',
        'enter_max_price': '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∑–ª–æ—Ç—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):',
        'search_results': '–ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:',
        'reset_search': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–∏—Å–∫ –∂–∏–ª—å—è üîé" –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.',
        'search_settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ üîé',
        'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è',
        'language_change': 'C–º–µ–Ω–∞ —è–∑—ã–∫–∞ üåê',
        'start_new_search': '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ üîé',
        'retrieval': '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ üîÅ',
        'select_setting': '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É',
        'automatic_check': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞', 
        'reboot': '–ë–æ—Ç –±—ã–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª—è –µ–≥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–æ–±–æ—Ç—ã, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ( /start )'
    },
    'UA': {
        'language_processing_': '–ü–æ—à—É–∫ –∂–∏—Ç–ª–∞ üîé',
        'greeting': '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å –≤ –ü–æ–ª—å—â—ñ.',
        'choose_city': 'üèôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –≤ –ü–æ–ª—å—â—ñ:',
        'choose_rooms': 'üèò –í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:',
        'enter_min_price': '‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É –≤ –∑–ª–æ—Ç–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1000):',
        'enter_max_price': '‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É –≤ –∑–ª–æ—Ç–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2000):',
        'search_results': '–ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –ø–æ—à—É–∫—É:',
        'reset_search': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç—ñ. –í–∏–±–µ—Ä—ñ—Ç—å "–ü–æ—à—É–∫ –∂–∏—Ç–ª–∞ üîé", —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—à—É–∫.',
        'search_settings': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É üîé',
        'settings': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öôÔ∏è',
        'language_change': '–ó–º—ñ–Ω–∞ –º–æ–≤–∏ üåê',
        'start_new_search': '–†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—à—É–∫ üîé',
        'retrieval': '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ—à—É–∫ üîÅ',
        'select_setting': '–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
        'automatic_check': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞',
        'reboot': '–ë–æ—Ç –±—É–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π, –¥–ª—è –π–æ–≥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É ( /start )'
    },
    'PL': {
        'language_processing_': 'Szukaj mieszkania üîé',
        'greeting': 'Cze≈õƒá! Jestem botem, kt√≥ry pomaga znale≈∫ƒá nieruchomo≈õƒá w Polsce.',
        'choose_city': 'Wybierz miasto w Polsce:',
        'choose_rooms': 'üèò Wybierz liczbƒô pokoi:',
        'enter_min_price': '‚úèÔ∏è Podaj minimalnƒÖ cenƒô w PLN (np. 1000):',
        'enter_max_price': '‚úèÔ∏è Podaj maksymalnƒÖ cenƒô w PLN (np. 2000):',
        'search_results': 'Znaleziono opcje spe≈ÇniajƒÖce Twoje kryteria wyszukiwania:',
        'reset_search': 'Ustawienia zosta≈Çy zresetowane. Wybierz "Szukaj mieszkania üîé", aby rozpoczƒÖƒá nowe wyszukiwanie.',
        'search_settings': 'Ustawienia wyszukiwania üîé',
        'settings': 'Ustawienia ‚öôÔ∏è',
        'language_change': 'Zmiana jƒôzyka üåê',
        'start_new_search': 'Rozpocznij nowe wyszukiwanie üîé',
        'retrieval': 'Powt√≥rz wyszukiwanie üîÅ',
        'select_setting': 'Wybierz ustawienie',
        'automatic_check': 'Automatyczna kontrola',
        'reboot': 'Bot zosta≈Ç wstƒôpnie za≈Çadowany, aby dzia≈Ça≈Ç poprawnie, nale≈ºy uruchomiƒá polecenie ( /start )'
    },
}

def json_upload3():

    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON –¥–∞–Ω–Ω—ã—Ö
    file_name = os.path.join(folder_path, 'user_data.json')

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
    with open(file_name, 'r') as file:
        users = json.load(file)

    return users

users = json_upload3()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
outer_keys = users.keys()
    
for user_key, user_value in users.items():
     bot.send_message(user_key, translations['EN']['reboot'])

def json_upload():
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON –¥–∞–Ω–Ω—ã—Ö
    file_name = os.path.join(folder_path, 'user_data.json')

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
    with open(file_name, 'r') as file:
        params_old = json.load(file)

    return params_old

def jsono(params):
    folder_path = 'JSON_DATA'
    file_name = os.path.join(folder_path, 'user_data.json')
    
    # –ó–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª JSON
    with open(file_name, 'w') as file:
        json.dump(params, file)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
@bot.message_handler(commands=['start'])
def start(message):
    global user_id
    user_id = message.from_user.id

    params[user_id] = {
        'city': '',
        'rooms': '',
        'price_min': '',
        'price_max': '',
        'chat.id': '',
        'avto': 1,
        'avto_name': '',
        'avto_pars_time': 0
    }
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for language in languages:
        item = types.KeyboardButton(language)
        markup.add(item)
    ch = message.chat.id
    params[user_id]['chat.id'] = ch
    bot.send_message(message.chat.id, 'Please select your language', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text == "EN" or message.text == "RU" or message.text == "UA" or message.text =="PL")
def language_processing(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    global lang 
    lang[user_id] = message.text
    item = types.KeyboardButton(translations[lang[user_id]]['language_processing_'])
    print(lang[user_id])
    markup.add(item)
    item = types.KeyboardButton(translations[lang[user_id]]['language_change'])
    markup.add(item)
    bot.send_message(message.chat.id, translations[lang[user_id]]['greeting'], reply_markup=markup)


# C–º–µ–Ω–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text == translations[lang[user_id]]['language_change'])
def start(message):
        user_id = message.from_user.id
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for language in languages:
            item = types.KeyboardButton(language)
            markup.add(item)
        bot.send_message(message.chat.id, 'Please select your language', reply_markup=markup)
        user_id = message.from_user.id

# –ù–æ–≤—ã–π –ø–æ–∏—Å–∫
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –∂–∏–ª—å—è"
@bot.message_handler(func=lambda message: message.text == translations[lang[user_id]]['language_processing_'])
def search(message):
        user_id = message.from_user.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for city in cities:
            item = types.KeyboardButton(city)
            markup.add(item)
        bot.send_message(message.chat.id, translations[lang[user_id]]['choose_city'], reply_markup=markup)
        user_id = message.from_user.id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@bot.message_handler(func=lambda message: message.text in cities)
def choose_rooms(message):
        user_id = message.from_user.id
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        params[user_id]['city'] = message.text
        print(params[user_id]['city'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for room in rooms:
            item = types.KeyboardButton(room)
            markup.add(item)
        bot.send_message(message.chat.id, translations[lang[user_id]]['choose_rooms'], reply_markup=markup)
        user_id = message.from_user.id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
@bot.message_handler(func=lambda message: message.text in rooms)
def enter_min_price(message):
        user_id = message.from_user.id
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
        params[user_id]['rooms'] = message.text

        # –ó–∞–ø—Ä–æ—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        bot.send_message(message.chat.id, translations[lang[user_id]]['enter_min_price'])
        user_id = message.from_user.id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
@bot.message_handler(func=lambda message: message.text.isdigit())
def enter_max_price(message):
        user_id = message.from_user.id
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        params[user_id]['price_min'] = int(message.text)

        # –ó–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        bot.send_message(message.chat.id, translations[lang[user_id]]['enter_max_price'])

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        bot.register_next_step_handler(message, start_search)
        user_id = message.from_user.id

def enter_max_price1(message):
        user_id = message.from_user.id

        # –ó–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        bot.send_message(message.chat.id, translations[lang[user_id]]['enter_max_price'])

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        bot.register_next_step_handler(message, start_search)
        user_id = message.from_user.id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
def start_search(message):
        user_id = message.from_user.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item = types.KeyboardButton(translations[lang[user_id]]['settings'])
        markup.add(item)
        item = types.KeyboardButton(translations[lang[user_id]]['retrieval'])
        markup.add(item)
        
        if isinstance(message.from_user.id, (int, float)):
            user_id = message.from_user.id
        else:
            enter_max_price1()

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        params[user_id]['price_max'] = int(message.text)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫

        city = params[user_id]['city']
        min_price = params[user_id]['price_min']
        max_price = params[user_id]['price_max']
        params[user_id]['avto_pars_time'] = 0
        r = params[user_id]['rooms']
        main(city, min_price, max_price, r)

        user_id = message.from_user.id

        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON –¥–∞–Ω–Ω—ã—Ö
        file_name = os.path.join(folder_path, 'parsed_data.json')

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        with open(file_name, 'r') as file:
            data_dict = json.load(file)

        os.remove(file_name)
        json_old = json_upload()

        for i in range(len(data_dict)):
            name = data_dict[str(i)]['name']
            price = data_dict[str(i)]['price']
            price1 = re.sub(r'<style[^>]*>.*?</style>', '', price, flags=re.DOTALL)
            image_url = data_dict[str(i)]['image']
            link = data_dict[str(i)]['link']
            name_a.append(link)
            
            bot.send_photo(message.chat.id, image_url, reply_markup=markup)
            bot.send_message(message.chat.id, f"{name} \n\n {price1} \n\n [link]({link})")

        params[user_id]['avto_name'] = name_a

        def update_or_add( json_old, key, params):
            if key in json_old:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
                json_old[key].update(params)
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                json_old[key] = params

        for key, data in params.items():
            update_or_add(json_old, key, data)


        jsono(json_old)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
@bot.message_handler(func=lambda message: message.text == translations[lang[user_id]]['retrieval'])
def retrieval(message):
        user_id = message.from_user.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item = types.KeyboardButton(translations[lang[user_id]]['settings'])
        markup.add(item)
        item = types.KeyboardButton(translations[lang[user_id]]['retrieval'])
        markup.add(item)

        user_id = message.from_user.id

        city = params[user_id]['city']
        min_price = params[user_id]['price_min']
        max_price = params[user_id]['price_max']
        params[user_id]['avto_pars_time'] = 0
        r = params[user_id]['rooms']
        main(city, min_price, max_price, r)

        user_id = message.from_user.id

        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON –¥–∞–Ω–Ω—ã—Ö
        file_name = os.path.join(folder_path, 'parsed_data.json')

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        with open(file_name, 'r') as file:
            data_dict = json.load(file)

        os.remove(file_name)
        json_old = json_upload()

        for i in range(len(data_dict)):
            name = data_dict[str(i)]['name']
            price = data_dict[str(i)]['price']
            price1 = re.sub(r'<style[^>]*>.*?</style>', '', price, flags=re.DOTALL)
            image_url = data_dict[str(i)]['image']
            link = data_dict[str(i)]['link']
            name_a.append(link)
            
            bot.send_photo(message.chat.id, image_url, reply_markup=markup)
            bot.send_message(message.chat.id, f"{name} \n\n {price1} \n\n [link]({link})")

        params[user_id]['avto_name'] = name_a

        def update_or_add( json_old, key, params):
            if key in json_old:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
                json_old[key].update(params)
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                json_old[key] = params

        for key, data in params.items():
            update_or_add(json_old, key, data)


        jsono(json_old)
        

# –ù–∞—Å—Ç—Ä–æ–∏–∫–∏
@bot.message_handler(func=lambda message: message.text == translations[lang[user_id]]['settings'])
def settings(message):
        user_id = message.from_user.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item = types.KeyboardButton(translations[lang[user_id]]['automatic_check'])
        markup.add(item)
        item = types.KeyboardButton(translations[lang[user_id]]['search_settings'])
        markup.add(item)
        item = types.KeyboardButton(translations[lang[user_id]]['language_change'])
        markup.add(item)
        bot.send_message(message.chat.id, translations[lang[user_id]]['select_setting'], reply_markup=markup)

        user_id = message.from_user.id


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞"
@bot.message_handler(func=lambda message: message.text == translations[lang[user_id]]['search_settings'])
def reset_search(message):
        user_id = message.from_user.id
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        params[user_id].clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item = types.KeyboardButton(translations[lang[user_id]]['language_processing_'])
        markup.add(item)
        bot.send_message(message.chat.id, translations[lang[user_id]]['language_processing_'], reply_markup=markup)

        user_id = message.from_user.id

@bot.message_handler(func=lambda message: message.text == translations[lang[user_id]]['automatic_check'])
def automatic_check(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    user_id = message.from_user.id

    avto_name = params[user_id]['avto_name']

    if avto_name == '1':
        avto_name = '0'
        params[user_id]['avto_name'] = 0
    else:
        avto_name = '1'
        params[user_id]['avto_name'] = 1

    print(params[user_id]['avto_name'])

    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON –¥–∞–Ω–Ω—ã—Ö
    file_name = os.path.join(folder_path, 'user_data.json')

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
    with open(file_name, 'r') as file:
        data_dict = json.load(file)

    json_old = json_upload()

    def update_or_add( json_old, key, params):
        if key in json_old:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
            json_old[key].update(params)
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
            json_old[key] = params

    for key, data in params.items():
        update_or_add(json_old, key, data)


    jsono(json_old)

    item = types.KeyboardButton(translations[lang[user_id]]['settings'])
    markup.add(item)
    item = types.KeyboardButton(translations[lang[user_id]]['retrieval'])
    markup.add(item)

    if avto_name == '1':
        bot.send_message(message.chat.id, f"{translations[lang[user_id]]['automatic_check']} is On", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"{translations[lang[user_id]]['automatic_check']} is Off", reply_markup=markup)
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
